from asyncio import sleep

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from tgbot.keyboards.inline_fool import fool_start_game, show_done_button, propose_more_cards
from tgbot.keyboards.reply import fool_game_actions
from tgbot.misc.factories import for_fool_player_turn, for_fool_propose_more_cards_done, for_fool_player_cover
from tgbot.services.default_commands import get_default_commands
from tgbot.services.fool_service import create_deck, play_fool_round, hand_out_cards, pick_card, place_card_on_desk, \
    bot_try_cover, check_who_first, bot_turn, bot_add_all, add_cards_to_player, bot_full_up, player_full_up, \
    add_cards_to_bot, check_more_cards
from tgbot.services.printer import print_fool_rules, print_emotion


async def fool(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fool.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –≤—ã–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.
    """
    await state.finish()
    await print_fool_rules(message)
    await message.answer('–ù—É —á—Ç–æ, —Å—Ä–∞–∑–∏–º—Å—è?', reply_markup=await fool_start_game())


async def start_fool(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä—É. –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ fool_start_game.
    –ó–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ play_fool_round.
    """
    await call.message.edit_reply_markup(reply_markup=None)

    deck = await create_deck()  # —Å–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–¥—É
    async with state.proxy() as data:
        data['deck'] = deck
        data['trump_used'] = False  # –∫–æ–∑—ã—Ä—å –Ω–∞ —Å—Ç–æ–ª–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)

    trump = await pick_card(state)
    player_cards = await hand_out_cards(state, 6)
    bot_cards = await hand_out_cards(state, 6)
    who_first = await check_who_first(trump, player_cards, bot_cards)

    async with state.proxy() as data:
        data['player_cards'] = player_cards
        data['bot_cards'] = bot_cards
        data['trump'] = trump
        data['last_winner'] = who_first

    await call.message.answer(f"üëç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.\n–ü–æ–µ—Ö–∞–ª–∏!", reply_markup=fool_game_actions)
    await sleep(3)
    await play_fool_round(call.message, state)
    await call.message.delete()


async def player_put_card(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–∞—Ä—Ç—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ (callback_data.get('action')), –±–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É, –ª–∏–±–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    card = callback_data.get('card')
    await place_card_on_desk(state, card, place_for='player')
    await call.message.answer(card)

    if callback_data.get('action') == 'cover':
        await bot_try_cover(call.message, state, card)
    else:
        await call.message.answer(f'ü§ñ {card} –±–µ—Ä—É. –ï—Å—Ç—å –µ—â—ë?')
        more_cards = await check_more_cards(state, 'player')
        await sleep(1)
        if more_cards is not None:
            await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –∫–∞—Ä—Ç—ã',
                                      reply_markup=await propose_more_cards(cards=more_cards, action='add'))
        else:
            await call.message.answer('ü§µ –ù–µ—Ç—É...', reply_markup=await show_done_button(action='take'))


async def player_covers(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–∞—Ä—Ç—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∫—Ä–æ–µ—Ç –∫–∞—Ä—Ç—É –±–æ—Ç–∞.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    card = callback_data.get('card')
    await place_card_on_desk(state, card, place_for='player')
    await call.message.answer(f'ü§µ –ö—Ä–æ—é: {card}')
    await bot_turn(call.message, state, target='add')


async def player_takes(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ë–µ—Ä—É", –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—É –±–æ—Ç–∞.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    cards = await bot_add_all(state)
    if cards:
        await call.message.answer(f"ü§ñ –í–æ—Ç —Ç–µ–±–µ –µ—â—ë: {', '.join(cards)}")
    await add_cards_to_player(state)

    await bot_full_up(state)
    await player_full_up(state)
    async with state.proxy() as data:
        data['last_winner'] = 'bot'
    await sleep(2)
    await play_fool_round(call.message, state)


async def player_propose_more_cards_done(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ", –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –∏—Ö –≤–∑—è–ª –±–æ—Ç.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ (callback_data.get('action')), –±–æ—Ç –ª–∏–±–æ –æ—Ç–±–∏–ª—Å—è (—Ç–æ–≥–¥–∞ –æ–Ω –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ä–∞—É–Ω–¥–∞),
    –ª–∏–±–æ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã —Å–µ–±–µ.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    await player_full_up(state)

    if callback_data.get('action') in ['next', 'cover']:
        await bot_full_up(state)
        last_winner = 'bot'
    else:
        await add_cards_to_bot(state)
        last_winner = 'player'

    async with state.proxy() as data:
        data['last_winner'] = last_winner
    await play_fool_round(call.message, state)


async def next_fool_round(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–∫", –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∏–≥—Ä–æ–∫ –æ—Ç–±–∏–ª—Å—è –æ—Ç –∫–∞—Ä—Ç –±–æ—Ç–∞.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    await bot_full_up(state)
    await player_full_up(state)
    await sleep(2)
    await play_fool_round(call.message, state)


async def give_up_fool(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—é—Å—å'.
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É —Å –ø–æ–±–µ–¥–æ–π –±–æ—Ç–∞.
    """
    await print_emotion(message, True)
    await state.finish()
    await sleep(3)
    commands = await get_default_commands()
    await message.answer(f"ü§ñ –í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º?\n\n{commands}", reply_markup=ReplyKeyboardRemove())


def register_fool(dp: Dispatcher):
    dp.register_message_handler(fool, commands=["fool"], state="*")
    dp.register_callback_query_handler(start_fool, text='fool_start_game', state="*")
    dp.register_message_handler(give_up_fool, Text(equals='‚õîÔ∏è –°–¥–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –¥—É—Ä–∞–∫–∞—Ö ‚õîÔ∏è'), state="*")
    dp.register_callback_query_handler(player_takes, text='player_takes', state="*")
    dp.register_callback_query_handler(next_fool_round, text='next_fool_round', state="*")
    dp.register_callback_query_handler(player_covers, for_fool_player_cover.filter(), state="*")
    dp.register_callback_query_handler(player_put_card, for_fool_player_turn.filter(), state="*")
    dp.register_callback_query_handler(player_propose_more_cards_done, for_fool_propose_more_cards_done.filter(), state="*")
