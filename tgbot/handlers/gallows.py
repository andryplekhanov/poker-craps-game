from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.inline_gallows import gallows_start_game
from tgbot.keyboards.reply import gallows_game_actions
from tgbot.misc.states import GallowsGame
from tgbot.services.gallows_service import choose_word, check_letter, check_gallows_game_status, finish_gallows_game
from tgbot.services.printer import print_gallows_rules, print_gallows_letter


async def gallows(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /gallows.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –≤—ã–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.
    """
    await state.finish()
    await print_gallows_rules(message)
    await message.answer('–ù—É —á—Ç–æ, –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞? –ò–ª–∏ —Ç—ã –∑–∞–±–∑–¥–µ–ª?',
                         reply_markup=await gallows_start_game())


async def start_gallows(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä—É. –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ gallows_start_game.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é choose_word –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã good_letters, bad_letters, errors –∏ word,
    –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ wait_letter –∏ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –±—É–∫–≤—ã.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    word = await choose_word()
    word = word.rstrip('\n')
    async with state.proxy() as data:
        data['good_letters'] = list()
        data['bad_letters'] = list()
        data['errors'] = 0
        data['word'] = list(word)
    await call.message.answer(f"üëç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.\n"
                              f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {len(word)} –±—É–∫–≤. –û—Ç–≥–∞–¥–∞–π –µ–≥–æ.\n"
                              "–ü–æ–µ—Ö–∞–ª–∏!!!\n–í–≤–µ–¥–∏ –±—É–∫–≤—É...", reply_markup=gallows_game_actions)
    await print_gallows_letter(call.message, state)
    await GallowsGame.wait_letter.set()
    await call.message.delete()


async def get_letter(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ–∂–∏–¥–∞—é—â–∏–π –≤–≤–æ–¥ –±—É–∫–≤—ã. –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª - –Ω–µ –±—É–∫–≤–∞, –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –±—É–∫–≤—É.
    –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª - –±—É–∫–≤–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–∫–≤—ã check_letter.
    –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Ñ—É–Ω–∫—Ü–∏–µ–π check_gallows_game_status.
    """

    letter = message.text
    if not letter.isalpha() or not len(letter) == 1:
        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 1 –±—É–∫–≤—É')
    else:
        await check_letter(message, state, letter)
    await check_gallows_game_status(message, state)


async def give_up_gallows(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É'.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã finish_gallows_game —Å –ø–æ–±–µ–¥–æ–π –±–æ—Ç–∞.
    """
    await finish_gallows_game(message, state, 'bot')


async def show_rules_gallows(message: Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.
    """
    await print_gallows_rules(message)


def register_gallows(dp: Dispatcher):
    dp.register_message_handler(gallows, commands=["gallows"], state="*")
    dp.register_callback_query_handler(start_gallows, text='gallows_start_game', state="*")
    dp.register_message_handler(give_up_gallows, Text(equals='‚õîÔ∏è –°–¥–∞—Ç—å—Å—è ‚õîÔ∏è'), state="*")
    dp.register_message_handler(show_rules_gallows, Text(equals='üîé –ü—Ä–∞–≤–∏–ª–∞ üîé'), state="*")
    dp.register_message_handler(get_letter, state=GallowsGame.wait_letter),
