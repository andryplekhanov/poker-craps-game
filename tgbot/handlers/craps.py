from asyncio import sleep

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from tgbot.keyboards.inline_craps import bot_roll, do_roll, bot_reroll, craps_start_game
from tgbot.keyboards.reply_craps import game_actions
from tgbot.misc.factories import for_reroll, for_reroll_done
from tgbot.services.craps_service import play_round, finish_game, save_result, play_reroll, play_turn, set_winner, \
    ask_reroll, choose_dices_for_bots_reroll, should_bot_reroll
from tgbot.services.default_commands import get_default_commands
from tgbot.services.printer import print_craps_rules, print_emotion


async def craps(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /craps.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –≤—ã–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.
    """
    await state.finish()
    await print_craps_rules(message)
    await message.answer('–°—ã–≥—Ä–∞–µ–º?', reply_markup=await craps_start_game())


async def give_up(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É'.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –±–æ—Ç–∞ –Ω–∞ –ø–æ–±–µ–¥—É.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    await state.finish()
    await print_emotion(message=message, bot_win=True)
    await sleep(3)
    commands = await get_default_commands()
    await message.answer(f"–Ø —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n{commands}", reply_markup=ReplyKeyboardRemove())


async def show_rules(message: Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.
    """
    await print_craps_rules(message)


async def start_craps(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä—É. –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ craps_start_game.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã round_counter –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ player_score –∏ bot_score,
    –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é play_round –¥–ª—è –Ω–∞—á–∞–ª–∞ 1–≥–æ —Ä–∞—É–Ω–¥–∞.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    async with state.proxy() as data:
        data['round_counter'] = 1
        data['player_score'] = 0
        data['bot_score'] = 0
    await call.message.answer('üëç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.\n–ò–≥—Ä–∞–µ–º –¥–æ 5 –æ—á–∫–æ–≤.\n–ü–æ–µ—Ö–∞–ª–∏!!!', reply_markup=game_actions)
    await sleep(3)
    await play_round(call.message, state)
    await call.message.delete()


async def players_roll(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'do_roll' - –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –∑–∞ –∏–≥—Ä–æ–∫–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é play_turn, –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ save_result.
    –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–æ—Ç—É –ª–∏–±–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–π –±—Ä–æ—Å–æ–∫,
    –ª–∏–±–æ (–µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –±—Ä–æ—Å–∞–ª) –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    player_mark, player_summa, player_result, player_dice_list = await play_turn(call.message)
    await save_result(player_mark, player_summa, player_dice_list, save_for='player', state=state)
    await call.message.answer(f"ü§µ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{player_result} ({player_summa})</b>", parse_mode='html')

    await sleep(2)

    states = await state.get_data()
    last_winner = states.get('last_winner')
    if last_winner is None or last_winner == 'player':
        await call.message.answer(f'üë§ –ú–æ–π –±—Ä–æ—Å–æ–∫...', reply_markup=await bot_roll())
    else:
        await call.message.answer(f'üë§ –¢–µ–ø–µ—Ä—å –º–æ–π —á–µ—Ä—ë–¥...', reply_markup=await bot_reroll())


async def bots_roll(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'bot_roll' - –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –∑–∞ –±–æ—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é play_turn, –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ save_result.
    –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–≥—Ä–æ–∫—É –ª–∏–±–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–π –±—Ä–æ—Å–æ–∫,
    –ª–∏–±–æ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –±—Ä–æ—Å–∞–ª) –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    bot_mark, bot_summa, bot_result, bot_dice_list = await play_turn(call.message)
    await save_result(bot_mark, bot_summa, bot_dice_list, save_for='bot', state=state)
    await call.message.answer(f"üë§ –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{bot_result} ({bot_summa})</b>", parse_mode='html')

    await sleep(2)

    states = await state.get_data()
    last_winner = states.get('last_winner')
    if last_winner == 'bot':
        await call.message.answer(f'ü§µ –¢–≤–æ–π –±—Ä–æ—Å–æ–∫...', reply_markup=await do_roll())
    else:
        await ask_reroll(call.message, state)


async def bots_reroll(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 'bot_reroll'.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –ø–µ—Ä–µ–±—Ä–∞—ã–≤–∞—Ç—å –∫—É–±–∏–∫–∏, –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é should_bot_reroll.
    –ï—Å–ª–∏ –¥–∞ - –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä –∫—É–±–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞ (choose_dices_for_bots_reroll),
    –∑–∞—Ç–µ–º –ø–µ—Ä–µ–±—Ä–æ—Å (play_turn –∏–ª–∏ play_reroll).
    –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏ –ª–∏–±–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ (ask_reroll),
    –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (set_winner).
    """
    await call.message.edit_reply_markup(reply_markup=None)
    is_reroll = await should_bot_reroll(call.message, state)
    if is_reroll:
        await call.message.answer(f"üë§ –Ø –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—é...")
        dices_for_bots_reroll = await choose_dices_for_bots_reroll(call.message, state)
        if dices_for_bots_reroll == 'all':
            bot_mark, bot_summa, bot_result, bot_dice_list = await play_turn(call.message)
        else:
            bot_mark, bot_summa, bot_result, bot_dice_list = await play_reroll(call.message, state, 'bot')
        await save_result(bot_mark, bot_summa, bot_dice_list, save_for='bot', state=state)
        await call.message.answer(f"üë§ –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{bot_result} ({bot_summa})</b>", parse_mode='html')

    states = await state.get_data()
    if states.get('last_winner') == 'bot':
        await ask_reroll(call.message, state)
    else:
        await set_winner(call.message, state)


async def get_dice_for_reroll(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫—É–±–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–æ–∫ –ø–æ–∂–µ–ª–∞–ª –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å.
    –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É–±–∏–∫ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è player_dice_list.
    –ó–∞—Ç–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è: –∫–∞–∫–∏–µ –µ—â–µ –∫—É–±–∏–∫–∏ –æ–Ω –∂–µ–ª–∞–µ—Ç –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å (ask_reroll).
    """
    await call.message.edit_reply_markup(reply_markup=None)
    dice_value = callback_data.get('dice_value')
    states = await state.get_data()
    player_dice_list = states.get('player_dice_list')
    player_dice_list.remove(int(dice_value))
    async with state.proxy() as data:
        data['player_dice_list'] = player_dice_list
    await ask_reroll(call.message, state)
    await call.message.delete()


async def reroll_done(call: CallbackQuery, callback_data: dict, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ players_reroll.
    –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–µ—Ä–µ–±—Ä–æ—Å –∫—É–±–∏–∫–æ–≤ –∑–∞ –∏–≥—Ä–æ–∫–∞ (play_reroll –∏–ª–∏ play_turn), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç,
    —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥. –î–∞–ª–µ–µ –ª–∏–±–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏,
    –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—É–Ω–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (set_winner).
    """
    await call.message.edit_reply_markup(reply_markup=None)
    states = await state.get_data()

    if callback_data.get('action') == 'reroll_done':
        player_mark, player_summa, player_result, player_dice_list = await play_reroll(call.message, state, 'player')
    else:
        player_mark, player_summa, player_result, player_dice_list = await play_turn(call.message)
    await save_result(player_mark, player_summa, player_dice_list, save_for='player', state=state)

    await call.message.answer(f"ü§µ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{player_result} ({player_summa})</b>", parse_mode='html')
    await sleep(2)

    if states.get('last_winner') == 'bot':
        await set_winner(call.message, state)
    else:
        await call.message.answer(f'üë§ –¢–µ–ø–µ—Ä—å –º–æ–π —á–µ—Ä—ë–¥...', reply_markup=await bot_reroll())


async def next_round(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ do_next.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –Ω–∞–±—Ä–∞–ª –ª–∏ –∫—Ç–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ 5 –æ—á–∫–æ–≤.
    –ï—Å–ª–∏ –¥–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é finish_game –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.
    –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ (play_round).
    """
    await call.message.edit_reply_markup(reply_markup=None)
    states = await state.get_data()
    player_score = states.get('player_score')
    bot_score = states.get('bot_score')

    if player_score == 5 or bot_score == 5:
        await finish_game(call.message, player_score, bot_score, state)
    else:
        round = states.get('round_counter')
        round += 1
        async with state.proxy() as data:
            data['round_counter'] = round
        await play_round(call.message, state)


def register_craps(dp: Dispatcher):
    dp.register_message_handler(craps, commands=["craps"], state="*")
    dp.register_message_handler(give_up, Text(contains='–°–¥–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É'))
    dp.register_message_handler(show_rules, Text(contains='–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã'))
    dp.register_callback_query_handler(start_craps, text='craps_start_game', state="*")
    dp.register_callback_query_handler(players_roll, text='do_roll', state="*")
    dp.register_callback_query_handler(reroll_done, for_reroll_done.filter(), state="*")
    dp.register_callback_query_handler(next_round, text='next_round', state="*")
    dp.register_callback_query_handler(bots_roll, text='bot_roll', state="*")
    dp.register_callback_query_handler(bots_reroll, text='bot_reroll', state="*")
    dp.register_callback_query_handler(get_dice_for_reroll, for_reroll.filter(), state="*"),
