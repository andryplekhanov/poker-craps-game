from asyncio import sleep

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.inline_blackjack import blackjack_start_game, blackjack_action_choice, take_card, bot_takes_card
from tgbot.keyboards.reply import blackjack_game_actions
from tgbot.services.blackjack_service import create_deck, play_blackjack_round, play_blackjack_turn, \
    play_blackjack_bot_turn
from tgbot.services.printer import print_blackjack_rules, print_cards


async def blackjack(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /blackjack.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –≤—ã–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.
    """
    await state.finish()
    await print_blackjack_rules(message)
    await message.answer('–ù—É —á—Ç–æ, —Å—Ä–∞–∑–∏–º—Å—è?', reply_markup=await blackjack_start_game())


async def start_blackjack(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä—É. –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ blackjack_start_game.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é choose_word –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã good_letters, bad_letters, errors –∏ word,
    –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ wait_letter –∏ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –±—É–∫–≤—ã.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    deck = await create_deck()
    async with state.proxy() as data:
        data['deck'] = deck
        data['round_counter'] = 1
        data['player_score'] = 0
        data['bot_score'] = 0
        data['player_cards'] = []
        data['bot_cards'] = []
    await call.message.answer(f"üëç –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.\n–ò–≥—Ä–∞–µ–º –¥–æ 5 –æ—á–∫–æ–≤. –ü–æ–µ—Ö–∞–ª–∏!",
                              reply_markup=blackjack_game_actions)
    await sleep(3)
    await play_blackjack_round(call.message, state)
    await call.message.delete()


async def player_takes_card(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ 'do_roll' - –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤ –∑–∞ –∏–≥—Ä–æ–∫–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é play_turn, –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ save_result.
    –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–æ—Ç—É –ª–∏–±–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–π –±—Ä–æ—Å–æ–∫,
    –ª–∏–±–æ (–µ—Å–ª–∏ –±–æ—Ç —É–∂–µ –±—Ä–æ—Å–∞–ª) –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.
    """
    await call.message.edit_reply_markup(reply_markup=None)
    await play_blackjack_turn(call.message, state)
    await call.message.answer(f"–ë–µ—Ä—ë—à—å –µ—â–µ?", reply_markup=await blackjack_action_choice())
    await call.message.delete()


async def player_enough_card(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    states = await state.get_data()
    last_winner = states.get('last_winner')
    if last_winner is None or last_winner == 'player':
        await call.message.answer(f'üë§ –ú–æ–π —Ö–æ–¥...', reply_markup=await bot_takes_card())
    else:
        pass
    await call.message.delete()


async def bot_take_card(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await play_blackjack_bot_turn(call.message, state)
    await print_cards(call.message, state, print_for='bot')

# async def give_up_blackjack(message: Message, state: FSMContext):
#     """
#     –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å—Å—è –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É'.
#     –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã finish_blackjack_game —Å –ø–æ–±–µ–¥–æ–π –±–æ—Ç–∞.
#     """
#     await finish_blackjack_game(message, state, 'bot')


async def show_rules_blackjack(message: Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã'.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã.
    """
    await print_blackjack_rules(message)


def register_blackjack(dp: Dispatcher):
    dp.register_message_handler(blackjack, commands=["blackjack"], state="*")
    dp.register_callback_query_handler(start_blackjack, text='blackjack_start_game', state="*")
    # dp.register_message_handler(give_up_blackjack, Text(equals='‚õîÔ∏è –°–¥–∞—é—Å—å ‚õîÔ∏è'), state="*")
    dp.register_message_handler(show_rules_blackjack, Text(equals='üîé –ü–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ üîé'), state="*")
    dp.register_callback_query_handler(player_takes_card, text='take_card', state="*")
    dp.register_callback_query_handler(player_enough_card, text='enough_card', state="*")
    dp.register_callback_query_handler(bot_take_card, text='bot_takes_card', state="*")
