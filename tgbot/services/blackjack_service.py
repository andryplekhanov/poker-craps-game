from asyncio import sleep
from random import choice
from typing import Union

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from tgbot.keyboards.inline_blackjack import take_card, bot_takes_card, blackjack_next_round
from tgbot.services.craps_service import reward_player, reward_bot
from tgbot.services.default_commands import get_default_commands
from tgbot.services.printer import SUITS, VALUES, print_cards, print_emotion


async def create_deck() -> list[str]:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ['A‚ô£Ô∏è', '7‚ô¶Ô∏è', 'Q‚ô†Ô∏è'...]
    """
    return [f'{val}{suit}' for suit in SUITS for val in VALUES]


async def pick_card(state: FSMContext) -> Union[str, None]:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'A‚ô£Ô∏è'.
    –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã —É–¥–∞–ª—è–µ—Ç—Å—è.
    –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    states = await state.get_data()
    cards = states.get('deck')
    try:
        card = choice(cards)
        cards.remove(card)
        async with state.proxy() as data:
            data['deck'] = cards
        return card
    except IndexError:
        return None


async def get_game_data(state: FSMContext) -> tuple[int, str, int, int]:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –±–µ—Ä–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
    round_counter, last_winner, player_score, bot_score
    :return: round_counter, last_winner, player_score, bot_score
    """
    states = await state.get_data()
    round_counter = states.get('round_counter')
    last_winner = states.get('last_winner')
    player_score = states.get('player_score')
    bot_score = states.get('bot_score')
    return round_counter, last_winner, player_score, bot_score


async def save_card(state: FSMContext, card: str, save_for: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –∫ –Ω–∞–±–æ—Ä—É –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    states = await state.get_data()
    cards = states.get('player_cards') if save_for == 'player' else states.get('bot_cards')
    cards.append(card)

    async with state.proxy() as data:
        if save_for == 'player':
            data['player_cards'] = cards
        else:
            data['bot_cards'] = cards


async def get_cards_points(cards: list) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∫–∏ –≤ –Ω–∞–±–æ—Ä–µ –∫–∞—Ä—Ç.
    """
    result = 0
    ace_counter = 0
    for card in cards:
        if card[0] == 'A':
            ace_counter += 1
        elif card[0] in ['J', 'Q', 'K'] or card[1] == '0':
            result += 10
        else:
            result += int(card[0])

    if ace_counter > 0:
        if result > 10:
            result += ace_counter
        elif result == 10:
            if ace_counter == 1:
                result += 11
            else:
                result += ace_counter
        else:
            if ace_counter == 1:
                result += 11
            elif ace_counter == 2:
                result += 11
                result += 1
            elif ace_counter == 3 and result <= 8:
                result += 11
                result += 2
            elif ace_counter == 3 and result > 8:
                result += ace_counter
            elif ace_counter == 4 and result <= 7:
                result += 11
                result += 3
            elif ace_counter == 4 and result <= 7:
                result += ace_counter
    return result


async def play_blackjack_turn(message: Message, state: FSMContext) -> None:
    """
    –£–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã pick_card.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—É save_card.
    –ü–µ—á–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ print_cards.
    """
    await sleep(1)
    card = await pick_card(state)
    if card:
        await save_card(state, card, save_for='player')
    states = await state.get_data()
    cards = states.get('player_cards')
    await print_cards(message, cards, print_as='open')


async def check_fairplay(state: FSMContext) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Å—Ö–∏—Ç—Ä–∏—Ç—å –∏ –∑–∞–±—Ä–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã.
    –ï—Å–ª–∏ –∫–∞—Ä—Ç 12 –∏–ª–∏ –±–æ–ª—å—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    states = await state.get_data()
    cards = states.get('player_cards')
    return not len(cards) > 12


async def bot_need_more(state: FSMContext) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –±–æ—Ç—É –±—Ä–∞—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É.
    –ï—Å–ª–∏ —É –±–æ—Ç–∞ –º–µ–Ω—å—à–µ 17 –æ—á–∫–æ–≤ - –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –µ—â—ë.
    """
    states = await state.get_data()
    cards = states.get('bot_cards')
    cards_points = await get_cards_points(cards)
    return cards_points < 17


async def play_blackjack_bot_turn(message: Message, state: FSMContext) -> None:
    """
    –£–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∑–∞ –±–æ—Ç–∞ pick_card. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—É save_card.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±—Ä–∞—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É bot_need_more. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∞–º—É —Å–µ–±—è.
    –ò–Ω–∞—á–µ –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ "–ú–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".
    """
    card = await pick_card(state)
    if card:
        await save_card(state, card, save_for='bot')
    if await bot_need_more(state):
        await play_blackjack_bot_turn(message, state)
    else:
        await message.answer('ü§ñ –ú–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ')


async def inc_round_counter(state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ä–∞—É–Ω–¥–æ–≤ –Ω–∞ 1.
    """
    states = await state.get_data()
    round_counter = states.get('round_counter')
    round_counter += 1
    async with state.proxy() as data:
        data['round_counter'] = round_counter


async def set_blackjack_winner(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞ –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    await sleep(1)
    await message.answer('–û–∫, –≤—Å–∫—Ä—ã–≤–∞–µ–º—Å—è...')
    states = await state.get_data()
    player_cards = states.get('player_cards')
    bot_cards = states.get('bot_cards')
    player_points = await get_cards_points(player_cards)
    bot_points = await get_cards_points(bot_cards)

    await sleep(2)
    await message.answer(f"ü§µ –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ø–µ—Ä–µ–±–æ—Ä' if player_points > 21 else player_points}\n"
                         f"{', '.join(player_cards)}")
    await message.answer(f"ü§ñ –ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ø–µ—Ä–µ–±–æ—Ä' if bot_points > 21 else bot_points}\n"
                         f"{', '.join(bot_cards)}")

    await inc_round_counter(state)

    await sleep(2)
    if (22 > player_points > bot_points) or (player_points < 22 and bot_points >= 22):
        await reward_player(state)
        await message.answer('ü§µ –¢—ã –ø–æ–±–µ–¥–∏–ª', reply_markup=await blackjack_next_round())
    elif (22 > bot_points > player_points) or (bot_points < 22 and player_points >= 22):
        await reward_bot(state)
        await message.answer('ü§ñ –Ø –ø–æ–±–µ–¥–∏–ª', reply_markup=await blackjack_next_round())
    else:
        await message.answer('–ù–∏—á—å—è', reply_markup=await blackjack_next_round())


async def play_blackjack_round(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç–æ–º.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ - —Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É.
    """
    round_counter, last_winner, player_score, bot_score = await get_game_data(state)
    deck = await create_deck()
    async with state.proxy() as data:
        data['deck'] = deck
        data['player_cards'] = []
        data['bot_cards'] = []
    await message.answer(f'üîî –†–ê–£–ù–î #{round_counter}\n'
                         f'–¢—ã <b>{player_score}:{bot_score}</b> –Ø',
                         parse_mode='html')

    if last_winner is None or last_winner == 'player':
        await message.answer(f'ü§µ –¢–≤–æ–π —Ö–æ–¥...', reply_markup=await take_card())
    else:
        await message.answer(f'ü§ñ –ú–æ–π —Ö–æ–¥...', reply_markup=await bot_takes_card())


async def finish_blackjack(message: Message, state: FSMContext, winner: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —ç–º–æ—Ü–∏—é –±–æ—Ç–∞.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –∏–≥—Ä–∞–º–∏.
    """
    if winner == 'player':
        await print_emotion(message, False)
    else:
        await print_emotion(message, True)
    await state.finish()
    await sleep(3)
    commands = await get_default_commands()
    await message.answer(f"ü§ñ –í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º?\n\n{commands}", reply_markup=ReplyKeyboardRemove())
