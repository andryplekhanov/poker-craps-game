from asyncio import sleep
from collections import Counter
from random import randint

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from tgbot.keyboards.inline_craps import do_roll, bot_roll, players_reroll, do_next
from tgbot.services.default_commands import get_default_commands
from tgbot.services.printer import print_dice, print_emotion


async def roll_dice(num: int = 5) -> list[int]:
    """
    –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ num (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5).
    :param num: int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –±—Ä–æ—Å–∫–∞.
    :return: list[int]: —Å–ø–∏—Å–æ–∫ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
    """
    return [randint(1, 6) for _ in range(num)]


async def save_result(mark: int, summa: int, dice_list: list, save_for: str, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±—Ä–æ—Å–∫–∞.
    """
    async with state.proxy() as data:
        if save_for == 'player':
            data['player_mark'] = mark
            data['player_summa'] = summa
            data['player_dice_list'] = dice_list
        else:
            data['bot_mark'] = mark
            data['bot_summa'] = summa
            data['bot_dice_list'] = dice_list


async def check_combination(dice_set: list[int]) -> tuple[int, int, str]:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞. –°—Ç–∞–≤–∏—Ç –æ—Ü–µ–Ω–∫—É mark,
    –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É summa (–Ω—É–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
    :param dice_set: —Å–ø–∏—Å–æ–∫ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏ - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫—É–±–∏–∫–æ–≤
    :return: –∫–æ—Ä—Ç–µ–∂: (mark: –æ—Ü–µ–Ω–∫–∞, summa: —Å—É–º–º–∞, result: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø–∞–≤—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
    """
    combination_dict = Counter(dice_set)  # {5: 4, 6: 1}
    combination_dict_values = sorted(list(combination_dict.values()), reverse=True)  # [4, 1]

    if combination_dict_values[0] == 5:
        mark = 10
        summa = sum(dice_set)
        result = '–ü–æ–∫–µ—Ä'
    elif combination_dict_values[0] == 4:
        mark = 9
        summa = sum([key * val for key, val in combination_dict.items() if val == 4])
        result = '–ö–∞—Ä—ç'
    elif combination_dict_values[0] == 3 and combination_dict_values[1] == 2:
        mark = 8
        summa = sum([key * val for key, val in combination_dict.items() if val == 3 or val == 2])
        result = '–§—É–ª-—Ö–∞—É—Å'
    elif sum(dice_set) == 20 and len(combination_dict_values) == 5:
        mark = 7
        summa = 20
        result = '–ë–æ–ª—å—à–æ–π —Å—Ç—Ä–µ–π—Ç'
    elif sum(dice_set) == 15 and len(combination_dict_values) == 5:
        mark = 6
        summa = 15
        result = '–ú–∞–ª—ã–π —Å—Ç—Ä–µ–π—Ç'
    elif combination_dict_values[0] == 3:
        mark = 5
        summa = sum([key * val for key, val in combination_dict.items() if val == 3])
        result = '–¢—Ä–æ–π–∫–∞'
    elif combination_dict_values[0] == 2 and combination_dict_values[1] == 2:
        mark = 4
        summa = sum([key * val for key, val in combination_dict.items() if val == 2])
        result = '–î–≤–µ –ø–∞—Ä—ã'
    elif combination_dict_values[0] == 2:
        mark = 3
        summa = sum([key * val for key, val in combination_dict.items() if val == 2])
        result = '–ü–∞—Ä–∞'
    else:
        mark = 2
        summa = sum(dice_set)
        result = '–ù–∏—á–µ–≥–æ'
    return mark, summa, result


async def play_turn(message: Message) -> tuple[int, int, str, list]:
    """
    –£–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ roll_dice.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ check_combination. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—á–∞—Ç–∏ –∫—É–±–∏–∫–æ–≤ print_dice.
    :return: –∫–æ—Ä—Ç–µ–∂: (mark: –æ—Ü–µ–Ω–∫–∞, summa: —Å—É–º–º–∞, result: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø–∞–≤—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, dice_list: —Å–ø–∏—Å–æ–∫ –∫—É–±–∏–∫–æ–≤)
    """
    await sleep(2)
    dice_list = await roll_dice()
    mark, summa, result = await check_combination(dice_list)
    await print_dice(message, dice_list)
    return mark, summa, result, dice_list


async def play_reroll(message: Message, state: FSMContext, play_for: str) -> tuple[int, int, str, list]:
    """
    –£–ø—Ä–∞–≤–ª—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞ –∫—É–±–∏–∫–æ–≤.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–µ—Ä–µ–±—Ä–æ—Å (play_for == 'player'|'bot') –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ–≥–æ –∫—É–±–∏–∫–∏,
    –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –ø–æ–∂–µ–ª–∞–ª –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞ num.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ roll_dice.
    –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ check_combination. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—á–∞—Ç–∏ –∫—É–±–∏–∫–æ–≤ print_dice.
    :return: –∫–æ—Ä—Ç–µ–∂: (mark: –æ—Ü–µ–Ω–∫–∞, summa: —Å—É–º–º–∞, result: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–ø–∞–≤—à–µ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, dice_list: —Å–ø–∏—Å–æ–∫ –∫—É–±–∏–∫–æ–≤)
    """
    await sleep(2)
    states = await state.get_data()
    if play_for == 'player':
        player_dice_list = states.get('player_dice_list')
    else:
        player_dice_list = states.get('bot_dice_list')
    num = 5 - len(player_dice_list)
    dice_list = await roll_dice(num=num)
    result_dice_list = player_dice_list + dice_list
    mark, summa, result = await check_combination(result_dice_list)
    await print_dice(message, result_dice_list)
    return mark, summa, result, result_dice_list


async def ask_reroll(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–≥—Ä–æ–∫—É –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É players_reroll —Å –≤—ã–±–æ—Ä–æ–º –∫—É–±–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞.
    """
    states = await state.get_data()
    player_dice_list = states.get('player_dice_list')
    await message.answer('–í—ã–±–∏—Ä–∞–π, –∫–∞–∫–∏–µ –∫—É–±–∏–∫–∏ –∂–µ–ª–∞–µ—à—å –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –∏ –∂–º–∏ "–ì–æ—Ç–æ–≤–æ!"\n'
                         '–ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏–µ –Ω–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å, –∂–º–∏ —Å—Ä–∞–∑—É "–ì–æ—Ç–æ–≤–æ!"',
                         reply_markup=await players_reroll(player_dice_list))


async def should_bot_reroll(message: Message, state: FSMContext) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å –∫—É–±–∏–∫–∏.
    """
    states = await state.get_data()
    last_winner = states.get('last_winner')
    player_mark = states.get('player_mark')
    player_summa = states.get('player_summa')
    bot_mark = states.get('bot_mark')
    bot_summa = states.get('bot_summa')

    if last_winner is None or last_winner == 'player':
        if (bot_mark == player_mark) and (bot_summa > player_summa):
            await message.answer(f'üë§ –Ø —Ä–µ—à–∏–ª –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å')
            return False
        elif bot_mark > player_mark:
            await message.answer(f'üë§ –Ø —Ä–µ—à–∏–ª –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å')
            return False
        return True

    if bot_mark >= 6:
        await message.answer(f'üë§ –Ø —Ä–µ—à–∏–ª –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—Ç—å')
        return False
    return True


async def choose_dices_for_bots_reroll(message: Message, state: FSMContext) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è, –∫–∞–∫–∏–µ –∫—É–±–∏–∫–∏ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –∞ –∫–∞–∫–∏–µ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å.
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'bot_dice_list' - –∫—É–±–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–±—Ä–æ—à–µ–Ω—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É.
    :return: str: 'all' - –µ—Å–ª–∏ –±–æ—Ç —Ä–µ—à–∏–ª –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫—É–±–∏–∫–∏; 'some' - –µ—Å–ª–∏ –±–æ—Ç –≤—ã–±—Ä–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞
    """
    states = await state.get_data()
    bot_mark = states.get('bot_mark')
    bot_dice_list = states.get('bot_dice_list')  # [5, 4, 5, 6, 1]

    if bot_mark == 2:
        await message.answer(f'üë§ –Ø —Ä–µ—à–∏–ª –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ...')
        return 'all'

    combination_dict = Counter(bot_dice_list)  # {5: 2, 6: 1, 4: 1, 1: 1}
    dices_for_save = []

    if bot_mark == 3 or bot_mark == 4:
        for key, val in combination_dict.items():
            if val == 2:
                for dice in bot_dice_list:  # [5, 4, 5, 6, 1]
                    if dice == key:
                        dices_for_save.append(dice)
    elif bot_mark == 5 or bot_mark == 8:
        for key, val in combination_dict.items():
            if val == 3:
                for dice in bot_dice_list:  # [5, 4, 5, 6, 5]
                    if dice == key:
                        dices_for_save.append(dice)
    elif bot_mark == 9:
        for key, val in combination_dict.items():
            if val == 4:
                for dice in bot_dice_list:  # [5, 5, 5, 6, 5]
                    if dice == key:
                        dices_for_save.append(dice)

    async with state.proxy() as data:
        data['bot_dice_list'] = dices_for_save
    return 'some'


async def reward_player(state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –∫ —Å—á–µ—Ç—É –∏–≥—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è player_score –∏ last_winner.
    """
    states = await state.get_data()
    score = states.get('player_score')
    score += 1
    async with state.proxy() as data:
        data['player_score'] = score
        data['last_winner'] = 'player'


async def reward_bot(state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç 1 –æ—á–∫–æ –∫ —Å—á–µ—Ç—É –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è bot_score –∏ last_winner.
    """
    states = await state.get_data()
    score = states.get('bot_score')
    score += 1
    async with state.proxy() as data:
        data['bot_score'] = score
        data['last_winner'] = 'bot'


async def finish_game(message: Message, player_score: int, bot_score: int, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–≥–æ - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –±–æ—Ç–∞.
    """
    await state.finish()
    await message.answer(f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ —Å–æ —Å—á—ë—Ç–æ–º:\nü§µ –¢—ã <b>{player_score}:{bot_score}</b> –ë–æ—Ç üë§")
    await sleep(2)
    if player_score > bot_score:
        await print_emotion(message=message, bot_win=False)
    else:
        await print_emotion(message=message, bot_win=True)
    await sleep(3)
    commands = await get_default_commands()
    await message.answer(f"–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º?\n\n{commands}", reply_markup=ReplyKeyboardRemove())


async def set_winner(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é reward_player –∏–ª–∏ reward_bot –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π do_next (—Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥).
    """
    states = await state.get_data()
    player_mark = states.get('player_mark')
    player_summa = states.get('player_summa')
    bot_mark = states.get('bot_mark')
    bot_summa = states.get('bot_summa')

    if player_mark > bot_mark:
        await reward_player(state)
        text = 'ü§µ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –£ —Ç–µ–±—è —Å—Ç–∞—Ä—à–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.'
    elif player_mark < bot_mark:
        await reward_bot(state)
        text = 'üë§ –Ø –≤—ã–∏–≥—Ä–∞–ª. –£ –º–µ–Ω—è —Å—Ç–∞—Ä—à–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.'
    else:
        if player_summa > bot_summa:
            await reward_player(state)
            text = 'ü§µ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –£ —Ç–µ–±—è –±–æ–ª—å—à–µ —Å—É–º–º–∞.'
        elif player_summa < bot_summa:
            await reward_bot(state)
            text = 'üë§ –Ø –≤—ã–∏–≥—Ä–∞–ª. –£ –º–µ–Ω—è –±–æ–ª—å—à–µ —Å—É–º–º–∞.'
        else:
            text = '–ù–∏—á—å—è.'
    await message.answer(text, reply_markup=await do_next())


async def play_round(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å—á–µ—Ç–æ–º.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –ø—Ä–æ—à–ª–æ–º —Ä–∞—É–Ω–¥–µ - —Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ—Å–æ–∫ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É.
    """
    states = await state.get_data()
    round_counter = states.get('round_counter')
    last_winner = states.get('last_winner')
    player_score = states.get('player_score')
    bot_score = states.get('bot_score')
    await message.answer(f'üîî –†–ê–£–ù–î #{round_counter}\n'
                         f'–¢—ã <b>{player_score}:{bot_score}</b> –Ø',
                         parse_mode='html')

    if last_winner is None or last_winner == 'player':
        await message.answer(f'ü§µ –¢–≤–æ–π –±—Ä–æ—Å–æ–∫...', reply_markup=await do_roll())
    else:
        await message.answer(f'üë§ –ú–æ–π –±—Ä–æ—Å–æ–∫...', reply_markup=await bot_roll())
