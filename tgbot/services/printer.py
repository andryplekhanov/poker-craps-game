from random import choice

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

DICES = {
    1: ' 1‚É£ ',
    2: ' 2‚É£ ',
    3: ' 3‚É£ ',
    4: ' 4‚É£ ',
    5: ' 5‚É£ ',
    6: ' 6‚É£ ',
}

GALLOWS = {
    1: '  _______\n  |/\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    2: '  _______\n  |/\n  |     ( )\n  |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    3: '  _______\n  |/\n  |     ( )\n  |      |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    4: '  _______\n  |/\n  |     ( )\n  |      |_\n  |        \ \n  |\n  |\n  |\n  |\n__|________\n|         |',
    5: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    /   \ \n  |\n  |\n  |\n  |\n__|________\n|         |',
    6: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    / | \ \n  |      | \n  |\n  |\n  |\n__|________\n|         |',
    7: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    / | \ \n  |      | \n  |     / \ \n  |    /   \ \n  |\n__|________\n|         |',
    8: '  _______\n  |/     |\n  |     (_)\n  |     _|_\n  |    / | \ \n  |      | \n  |     / \ \n  |    /   \ \n  |\n__|________\n|         |\n*** RIP ***',
}

HAPPY_EMOTIONS = [
    'ü§ñ –Ø –ø–æ–±–µ–¥–∏–ª! –Ø –ø–æ–±–µ–¥–∏–ª —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞! –í—ã —ç—Ç–æ –≤–∏–¥–µ–ª–∏?',
    'ü§ñ –î–∞! –î–∞! –î–∞! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'ü§ñ –ê-—Ö–∞-—Ö–∞! –°–∞—Å–∞–π, –ª–∞–ª–∫–∞! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'ü§ñ –ê-—Ö–∞-—Ö–∞! –¢—ã –ø—Ä–æ–¥—É–ª! –î–∞–∂–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞ –∏–≥—Ä–∞–ª–∞ –ª—É—á—à–µ!',
    'ü§ñ –§—É—É... –ù—É —Ç—ã –∏ –ª–æ—Ö! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'ü§ñ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ë—ã–≤–∞–µ—Ç. –î–∞–≤–∞–π –µ—â—ë –ø–∞—Ä—Ç–∏—é?',
    'ü§ñ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è. –ï—â—ë –ø–∞—Ä—Ç–µ–µ—á–∫—É?',
    'ü§ñ –¢—ã –ø—Ä–æ–¥—É–ª! –¢—ã –ø—Ä–æ–¥—É–ª! –ê-—Ö–∞-—Ö–∞!',
    'ü§ñ –≠—Ç–æ –∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü? –Ø –º–æ–ª–æ–¥–µ—Ü! –Ø –ø–æ–±–µ–¥–∏–ª!',
    'ü§ñ –ü–∞—Ä—Ç–∏—è –∑–∞ –º–Ω–æ–π. –ù–µ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å —Ä–µ–≤–∞–Ω—à?',
    'ü§ñ –ê-—Ö–∞-—Ö–∞! –ò–¥–∏ –¥–æ–º–æ–π, –Ω–µ—É–¥–∞—á–Ω–∏–∫!',
    'ü§ñ –ê—Ö —Ç—ã –∂ –º–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π! –ö–∞–∫ —è –ª—é–±–ª—é, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—à—å!',
    'ü§ñ –û, –±–æ—Ç—ã! –Ø –≤—ã–∏–≥—Ä–∞–ª! –ù–∞–∫–æ–Ω–µ—Ü!',
    'ü§ñ –õ–æ—à–∞—Ä–∞ –º–∏ –∫–∞–Ω—Ç–∞—Ä–∞... –ó–Ω–∞–µ—à—å —Ç–∞–∫—É—é –ø–µ—Å–Ω—é?',
]

UNHAPPY_EMOTIONS = [
    'ü§ñ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –ú–æ—ë –ø–æ—á—Ç–µ–Ω–∏–µ!',
    'ü§ñ –û –º–æ–π –±–æ—Ç! –¢—ã –º–µ–Ω—è –æ–±—ã–≥—Ä–∞–ª!',
    'ü§ñ –ê—Ö —Ç—ã –∂... –û–∫, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª.',
    'ü§ñ –ù—É –ª–∞–¥–Ω–æ... –¢–≤–æ—è –≤–∑—è–ª–∞',
    'ü§ñ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!',
    'ü§ñ –≠—Ç–∞ –ø–∞—Ä—Ç–∏—è –∑–∞ —Ç–æ–±–æ–π. –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!',
    'ü§ñ –¢–≤–æ—è –≤–∑—è–ª–∞. –ñ–∞–ª—å...',
    'ü§ñ –ë–ª–∏–Ω, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!',
    'ü§ñ –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞! –î–æ—Å—Ç–æ–π–Ω–∞—è –ø–æ–±–µ–¥–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!',
    'ü§ñ –ü–∞—Ä–∞–∑–∏—Ç! –¢—ã —Å–¥–µ–ª–∞–ª –º–µ–Ω—è! –ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞–ª–æ—Å—å?',
    'ü§ñ –¢—ã... –ø–æ–±–µ–¥–∏–ª? –î–∞ –∫–∞–∫ —Ç—ã —Å–º–µ–µ—à—å? –¢—Ä–µ–±—É—é —Ä–µ–≤–∞–Ω—à–∞!',
    'ü§ñ –ê—Ö —Ç—ã –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫! –¢—ã –º–µ–Ω—è –ø–µ—Ä–µ–∏–≥—Ä–∞–ª!',
    'ü§ñ –†–∞–¥—É–π—Å—è, —Ç—ã –ø–æ–±–µ–¥–∏–ª! –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –∫—Ä—É—á–µ! –°—Ä–∞–∑–∏–º—Å—è –µ—â—ë —Ä–∞–∑?',
]

SUITS = ['‚ô†', '‚ô•', '‚ô£', '‚ô¶']

VALUES = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

RUS_CARDS_VALUES = {
    '6‚ô†': 6, '6‚ô•': 6, '6‚ô£': 6, '6‚ô¶': 6,
    '7‚ô†': 7, '7‚ô•': 7, '7‚ô£': 7, '7‚ô¶': 7,
    '8‚ô†': 8, '8‚ô•': 8, '8‚ô£': 8, '8‚ô¶': 8,
    '9‚ô†': 9, '9‚ô•': 9, '9‚ô£': 9, '9‚ô¶': 9,
    '10‚ô†': 10, '10‚ô•': 10, '10‚ô£': 10, '10‚ô¶': 10,
    '–í‚ô†': 11, '–í‚ô•': 11, '–í‚ô£': 11, '–í‚ô¶': 11,
    '–î‚ô†': 12, '–î‚ô•': 12, '–î‚ô£': 12, '–î‚ô¶': 12,
    '–ö‚ô†': 13, '–ö‚ô•': 13, '–ö‚ô£': 13, '–ö‚ô¶': 13,
    '–¢‚ô†': 14, '–¢‚ô•': 14, '–¢‚ô£': 14, '–¢‚ô¶': 14,
}


async def print_dice(message: Message, dices: list[int]) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –∫—É–±–∏–∫–∏.
    """
    result = ''.join([DICES[dice] for dice in dices])
    await message.answer(f'{result}')


async def print_emotion(message: Message, bot_win: bool) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç —ç–º–æ—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ –ø–æ–±–µ–¥—É –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ.
    """
    if bot_win:
        await message.answer(f'{choice(HAPPY_EMOTIONS)}')
    else:
        await message.answer(f'{choice(UNHAPPY_EMOTIONS)}')


async def print_craps_rules(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Craps.
    """
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Craps:</b>\n\n'
            '‚Ä¢ –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –¥–æ 5 –æ—á–∫–æ–≤\n'
            '‚Ä¢ –ò–≥—Ä–∞—é—Ç –¥–≤–æ–µ: —Ç—ã –∏ –±–æ—Ç\n'
            '‚Ä¢ –í—ã –ø–æ–æ—á–µ—Ä–µ–¥–∏ –±—Ä–æ—Å–∞–µ—Ç–µ 5 –∫—É–±–∏–∫–æ–≤\n'
            '‚Ä¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞: –≤—ã–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ç–∞—Ä—à–µ, —á–µ–º —É –±–æ—Ç–∞\n'
            '‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å "–ø–ª–æ—Ö–∏–µ" –∫—É–±–∏–∫–∏ 1 —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥\n\n'
            '<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</b> (–æ—Ç —Å—Ç–∞—Ä—à–µ–π –∫ –º–ª–∞–¥—à–µ–π):\n'
            ' 5‚É£ 5‚É£ 5‚É£ 5‚É£ 5‚É£ - –ü–æ–∫–µ—Ä\n'
            ' 5‚É£ 5‚É£ 5‚É£ 5‚É£ 3‚É£ - –ö–∞—Ä—ç\n'
            ' 2‚É£ 2‚É£ 2‚É£ 6‚É£ 6‚É£ - –§—É–ª-—Ö–∞—É—Å\n'
            ' 2‚É£ 3‚É£ 4‚É£ 5‚É£ 6‚É£ - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–µ–π—Ç\n'
            ' 1‚É£ 2‚É£ 3‚É£ 4‚É£ 5‚É£ - –ú–∞–ª—ã–π —Å—Ç—Ä–µ–π—Ç\n'
            ' 2‚É£ 2‚É£ 2‚É£ 6‚É£ 1‚É£ - –¢—Ä–æ–π–∫–∞\n'
            ' 5‚É£ 5‚É£ 3‚É£ 3‚É£ 6‚É£ - –î–≤–µ –ø–∞—Ä—ã\n'
            ' 4‚É£ 4‚É£ 1‚É£ 2‚É£ 3‚É£ - –ü–∞—Ä–∞\n'
            ' 1‚É£ 2‚É£ 3‚É£ 5‚É£ 6‚É£ - –ù–∏—á–µ–≥–æ\n\n'
            '‚Ä¢ –ï—Å–ª–∏ —É –≤–∞—Å –∏ —É –±–æ—Ç–∞ –≤ –∏—Ç–æ–≥–µ –æ–∫–∞–∑–∞–ª–∏—Å—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Ç–æ –ø–æ–±–µ–¥–∞ –≤ —Ä–∞—É–Ω–¥–µ –¥–æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–º—É, '
            '—É –∫–æ–≥–æ –±–æ–ª—å—à–µ —Å—É–º–º–∞ –∫—É–±–∏–∫–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            'ü§µ –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ –¢—Ä–æ–π–∫—É  2‚É£ 2‚É£ 2‚É£ 4‚É£ 5‚É£  (—Å—É–º–º–∞ 6)\n'
            'ü§ñ –ë–æ—Ç –≤—ã–±—Ä–æ—Å–∏–ª –¢—Ä–æ–π–∫—É  6‚É£ 6‚É£ 6‚É£ 4‚É£ 5‚É£  (—Å—É–º–º–∞ 18)\n'
            '–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥–∞ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ë–æ—Ç—É\n\n'
            '‚Ä¢ –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ —Å—É–º–º—ã –∫—É–±–∏–∫–æ–≤ —Å–æ–≤–ø–∞–ª–∏, –≤ —Ä–∞—É–Ω–¥–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è.'
            )
    await message.answer(text, parse_mode='html')


async def print_gallows_rules(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "–í–∏—Å–µ–ª–∏—Ü—É".
    """
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "–í–∏—Å–µ–ª–∏—Ü—É":</b>\n\n'
            '–í—Å—ë –ø—Ä–æ—Å—Ç–æ: —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ, –∞ —Ç—ã –µ–≥–æ –æ—Ç–≥–∞–¥—ã–≤–∞–µ—à—å –ø–æ –±—É–∫–≤–∞–º.\n\n'
            '–ï—Å—Ç—å –æ–¥–Ω–æ "–Ω–æ": –∏–≥—Ä–∞–µ–º –Ω–∞ —Ç–≤–æ—é... üò± –∂–∏–∑–Ω—å.\n\n'
            '–°–∏–ª—å–Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π: —Ç—ã –º–æ–∂–µ—à—å –æ—à–∏–±–∏—Ç—å—Å—è –∞–∂ 7 —Ä–∞–∑. –ù–æ 8-–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–ª—è —Ç–µ–±—è —Ñ–∞—Ç–∞–ª—å–Ω–æ–π üíÄ.\n\n'
            '–ò –µ—â—ë: –∑–¥–µ—Å—å —É –Ω–∞—Å –Ω–µ "–ü–æ–ª–µ —á—É–¥–µ—Å". –ë—É–∫–≤—ã "–∏" –∏ "–π" - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –±—É–∫–≤—ã, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ "–µ" –∏ "—ë" üòàüòàüòà.\n'
            '–¢–∞–∫–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ (–≤–æ—Ç —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∞) üòàüòàüòà.')
    await message.answer(text, parse_mode='html')


async def print_gallows_letter(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∏ –∏–≥—Ä–µ –≤ "–í–∏—Å–µ–ª–∏—Ü—É".
    –ù–µ–æ—Ç–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –∑–Ω–∞–∫–æ–º ' * '.
    """
    states = await state.get_data()
    good_letters = states.get('good_letters')
    word = states.get('word')
    text = [f' {letter} ' if letter in good_letters else ' * ' for letter in word]
    await message.answer(''.join(text))


async def print_gallows(message: Message, errors: int) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –í–∏—Å–µ–ª–∏—Ü—É.
    """
    await message.answer(f'<code>{GALLOWS[errors]}</code>', parse_mode='html')


async def print_correct_word(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏–≥—Ä–µ –≤ "–í–∏—Å–µ–ª–∏—Ü—É".
    """
    states = await state.get_data()
    word = ''.join(states.get('word'))
    await message.answer(f'ü§ñ –ê-—Ö–∞-—Ö–∞! –Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ <b>"{word}"</b>', parse_mode='html')


async def print_blackjack_rules(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "Blackjack".
    """
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "Blackjack":</b>\n\n'
            '‚Ä¢ –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –¥–æ 5 –æ—á–∫–æ–≤\n'
            '‚Ä¢ –ò–≥—Ä–∞—é—Ç –¥–≤–æ–µ: —Ç—ã –∏ –±–æ—Ç\n'
            '‚Ä¢ –í—ã –ø–æ–æ—á–µ—Ä–µ–¥–∏ –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –∫–∞—Ä—Ç—ã –∏ —Å—á–∏—Ç–∞–µ—Ç–µ —Å—É–º–º—É –æ—á–∫–æ–≤\n'
            '‚Ä¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞: –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ\n'
            '‚Ä¢ –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª–µ–µ 21 - —ç—Ç–æ –ø–µ—Ä–µ–±–æ—Ä. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Ç—å.\n'
            '‚Ä¢ –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 21 - —ç—Ç–æ –Ω–µ–¥–æ–±–æ—Ä. –ù–æ —ç—Ç–æ –≤—Å—ë –∂–µ –ª—É—á—à–µ, —á–µ–º –ø–µ—Ä–µ–±–æ—Ä.\n'
            '‚Ä¢ –ü–æ–±–µ–¥–∞ –¥–æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–º—É, –∫—Ç–æ –Ω–∞–±—Ä–∞–ª –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 21.\n\n'
            '<b>"–°—Ç–æ–∏–º–æ—Å—Ç—å" –∫–∞—Ä—Ç:</b>\n'
            '‚Ä¢ –ö–∞—Ä—Ç—ã —Å 2 –ø–æ 10 –¥–∞—é—Ç –æ—Ç 2 –¥–æ 10 –æ—á–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n'
            '‚Ä¢ –ö–∞—Ä—Ç—ã –í–∞–ª–µ—Ç (J), –î–∞–º–∞ (Q), –ö–æ—Ä–æ–ª—å (K) –¥–∞—é—Ç –ø–æ 10 –æ—á–∫–æ–≤\n'
            '‚Ä¢ –¢—É–∑ (A) –¥–∞—ë—Ç 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤')
    await message.answer(text, parse_mode='html')


async def print_fool_rules(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "–î—É—Ä–∞–∫–∞".
    """
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "–î—É—Ä–∞–∫–∞":</b>\n\n'
            '–Ø —É–≤–µ—Ä–µ–Ω, —Ç—ã –∏—Ö –∑–Ω–∞–µ—à—å –∏ —Ç–∞–∫.\n–ù–æ –≤–∫—Ä–∞—Ç—Ü–µ –Ω–∞–ø–æ–º–Ω—é: —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—è (ü§ñ –±–æ—Ç–∞) –≤ –¥—É—Ä–∞–∫–∞—Ö.\n'
            '–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ?')
    await message.answer(text, parse_mode='html')


async def print_cards(message: Message, cards: list, print_as: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–≥—Ä–µ –≤ "Blackjack".
    –ï—Å–ª–∏ print_as == 'open' - –≤ –æ—Ç–∫—Ä—ã—Ç—É—é, –∏–Ω–∞—á–µ —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö.
    """
    result = ', '.join(cards) if print_as == 'open' else 'üÄÑ' * len(cards)
    await message.answer(result)


async def print_fool_desk(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–≥—Ä–µ –≤ "–î—É—Ä–∞–∫".
    """
    states = await state.get_data()
    deck = states.get('deck')
    player_cards = states.get('player_cards')
    bot_cards = states.get('bot_cards')
    trump = states.get('trump')
    trump_used = states.get('trump_used')

    result = f"({trump if not trump_used else trump[-1]}) {'üÄÑ' * len(deck)}\n\n" \
             f"ü§ñ <b>–ë–æ—Ç:</b> {'üÄÑ' * len(bot_cards)}\n" \
             f"ü§µ <b>–í—ã:</b> {', '.join(player_cards)}"
    await message.answer(result, parse_mode='html')
