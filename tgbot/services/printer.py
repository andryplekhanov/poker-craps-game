from random import choice

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

DICES = {
    1: ' 1‚É£ ',
    2: ' 2‚É£ ',
    3: ' 3‚É£ ',
    4: ' 4‚É£ ',
    5: ' 5‚É£ ',
    6: ' 6‚É£ ',
}

GALLOWS = {
    1: '  _______\n  |/\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    2: '  _______\n  |/\n  |     ( )\n  |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    3: '  _______\n  |/\n  |     ( )\n  |      |\n  |\n  |\n  |\n  |\n  |\n__|________\n|         |',
    4: '  _______\n  |/\n  |     ( )\n  |      |_\n  |        \ \n  |\n  |\n  |\n  |\n__|________\n|         |',
    5: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    /   \ \n  |\n  |\n  |\n  |\n__|________\n|         |',
    6: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    / | \ \n  |      | \n  |\n  |\n  |\n__|________\n|         |',
    7: '  _______\n  |/\n  |     ( )\n  |     _|_\n  |    / | \ \n  |      | \n  |     / \ \n  |    /   \ \n  |\n__|________\n|         |',
    8: '  _______\n  |/     |\n  |     (_)\n  |     _|_\n  |    / | \ \n  |      | \n  |     / \ \n  |    /   \ \n  |\n__|________\n|         |\n*** RIP ***',
}

HAPPY_EMOTIONS = [
    'üë§ –Ø –ø–æ–±–µ–¥–∏–ª! –Ø –ø–æ–±–µ–¥–∏–ª —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞! –í—ã —ç—Ç–æ –≤–∏–¥–µ–ª–∏?',
    'üë§ –î–∞! –î–∞! –î–∞! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'üë§ –ê-—Ö–∞-—Ö–∞! –°–∞—Å–∞–π, –ª–∞–ª–∫–∞! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'üë§ –ê-—Ö–∞-—Ö–∞! –¢—ã –ø—Ä–æ–¥—É–ª! –î–∞–∂–µ —Ç–≤–æ—è –±–∞–±—É—à–∫–∞ –∏–≥—Ä–∞–ª–∞ –ª—É—á—à–µ!',
    'üë§ –§—É—É... –ù—É —Ç—ã –∏ –ª–æ—Ö! –Ø –≤—ã–∏–≥—Ä–∞–ª!',
    'üë§ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ë—ã–≤–∞–µ—Ç. –î–∞–≤–∞–π –µ—â—ë –ø–∞—Ä—Ç–∏—é?',
    'üë§ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è. –ï—â—ë –ø–∞—Ä—Ç–µ–µ—á–∫—É?',
    'üë§ –¢—ã –ø—Ä–æ–¥—É–ª! –¢—ã –ø—Ä–æ–¥—É–ª! –ê-—Ö–∞-—Ö–∞!',
    'üë§ –≠—Ç–æ –∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü? –Ø –º–æ–ª–æ–¥–µ—Ü! –Ø –ø–æ–±–µ–¥–∏–ª!',
    'üë§ –ü–∞—Ä—Ç–∏—è –∑–∞ –º–Ω–æ–π. –ù–µ —Ö–æ—á–µ—à—å –≤–∑—è—Ç—å —Ä–µ–≤–∞–Ω—à?',
    'üë§ –ê-—Ö–∞-—Ö–∞! –ò–¥–∏ –¥–æ–º–æ–π, –Ω–µ—É–¥–∞—á–Ω–∏–∫!',
    'üë§ –ê—Ö —Ç—ã –∂ –º–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π! –ö–∞–∫ —è –ª—é–±–ª—é, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—à—å!',
    'üë§ –û, –±–æ—Ç—ã! –Ø –≤—ã–∏–≥—Ä–∞–ª! –ù–∞–∫–æ–Ω–µ—Ü!',
    'üë§ –õ–æ—à–∞—Ä–∞ –º–∏ –∫–∞–Ω—Ç–∞—Ä–∞... –ó–Ω–∞–µ—à—å —Ç–∞–∫—É—é –ø–µ—Å–Ω—é?',
]

UNHAPPY_EMOTIONS = [
    'üë§ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –ú–æ—ë –ø–æ—á—Ç–µ–Ω–∏–µ!',
    'üë§ –û –º–æ–π –±–æ—Ç! –¢—ã –º–µ–Ω—è –æ–±—ã–≥—Ä–∞–ª!',
    'üë§ –ê—Ö —Ç—ã –∂... –û–∫, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª.',
    'üë§ –ù—É –ª–∞–¥–Ω–æ... –¢–≤–æ—è –≤–∑—è–ª–∞',
    'üë§ –¢—ã –≤—ã–∏–≥—Ä–∞–ª. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!',
    'üë§ –≠—Ç–∞ –ø–∞—Ä—Ç–∏—è –∑–∞ —Ç–æ–±–æ–π. –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!',
    'üë§ –¢–≤–æ—è –≤–∑—è–ª–∞. –ñ–∞–ª—å...',
    'üë§ –ë–ª–∏–Ω, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª!',
    'üë§ –•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞! –î–æ—Å—Ç–æ–π–Ω–∞—è –ø–æ–±–µ–¥–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!',
    'üë§ –ü–∞—Ä–∞–∑–∏—Ç! –¢—ã —Å–¥–µ–ª–∞–ª –º–µ–Ω—è! –ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ —É–¥–∞–ª–æ—Å—å?',
    'üë§ –¢—ã... –ø–æ–±–µ–¥–∏–ª? –î–∞ –∫–∞–∫ —Ç—ã —Å–º–µ–µ—à—å? –¢—Ä–µ–±—É—é —Ä–µ–≤–∞–Ω—à–∞!',
    'üë§ –ê—Ö —Ç—ã –∫–æ–∂–∞–Ω—ã–π –º–µ—à–æ–∫! –¢—ã –º–µ–Ω—è –ø–µ—Ä–µ–∏–≥—Ä–∞–ª!',
    'üë§ –†–∞–¥—É–π—Å—è, —Ç—ã –ø–æ–±–µ–¥–∏–ª! –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –∫—Ä—É—á–µ! –°—Ä–∞–∑–∏–º—Å—è –µ—â—ë —Ä–∞–∑?',
]


async def print_dice(message: Message, dices: list[int]) -> None:
    result = ''.join([DICES[dice] for dice in dices])
    await message.answer(f'{result}')


async def print_emotion(message: Message, bot_win: bool) -> None:
    if bot_win:
        await message.answer(f'{choice(HAPPY_EMOTIONS)}')
    else:
        await message.answer(f'{choice(UNHAPPY_EMOTIONS)}')


async def print_craps_rules(message: Message) -> None:
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Craps:</b>\n\n'
            '‚Ä¢ –ò–≥—Ä–∞ –≤–µ–¥—ë—Ç—Å—è –¥–æ 5 –æ—á–∫–æ–≤\n'
            '‚Ä¢ –ò–≥—Ä–∞—é—Ç –¥–≤–æ–µ: —Ç—ã –∏ –±–æ—Ç\n'
            '‚Ä¢ –í—ã –ø–æ–æ—á–µ—Ä–µ–¥–∏ –±—Ä–æ—Å–∞–µ—Ç–µ 5 –∫—É–±–∏–∫–æ–≤\n'
            '‚Ä¢ –í–∞—à–∞ –∑–∞–¥–∞—á–∞: –≤—ã–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å—Ç–∞—Ä—à–µ, —á–µ–º —É –±–æ—Ç–∞\n'
            '‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±—Ä–æ—Å–∏—Ç—å "–ø–ª–æ—Ö–∏–µ" –∫—É–±–∏–∫–∏ 1 —Ä–∞–∑ –∑–∞ —Ä–∞—É–Ω–¥\n\n'
            '<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏</b> (–æ—Ç —Å—Ç–∞—Ä—à–µ–π –∫ –º–ª–∞–¥—à–µ–π):\n'
            ' 5‚É£ 5‚É£ 5‚É£ 5‚É£ 5‚É£ - –ü–æ–∫–µ—Ä\n'
            ' 5‚É£ 5‚É£ 5‚É£ 5‚É£ 3‚É£ - –ö–∞—Ä—ç\n'
            ' 2‚É£ 2‚É£ 2‚É£ 6‚É£ 6‚É£ - –§—É–ª-—Ö–∞—É—Å\n'
            ' 2‚É£ 3‚É£ 4‚É£ 5‚É£ 6‚É£ - –ë–æ–ª—å—à–æ–π —Å—Ç—Ä–µ–π—Ç\n'
            ' 1‚É£ 2‚É£ 3‚É£ 4‚É£ 5‚É£ - –ú–∞–ª—ã–π —Å—Ç—Ä–µ–π—Ç\n'
            ' 2‚É£ 2‚É£ 2‚É£ 6‚É£ 1‚É£ - –¢—Ä–æ–π–∫–∞\n'
            ' 5‚É£ 5‚É£ 3‚É£ 3‚É£ 6‚É£ - –î–≤–µ –ø–∞—Ä—ã\n'
            ' 4‚É£ 4‚É£ 1‚É£ 2‚É£ 3‚É£ - –ü–∞—Ä–∞\n'
            ' 1‚É£ 2‚É£ 3‚É£ 5‚É£ 6‚É£ - –ù–∏—á–µ–≥–æ\n\n'
            '‚Ä¢ –ï—Å–ª–∏ —É –≤–∞—Å –∏ —É –±–æ—Ç–∞ –≤ –∏—Ç–æ–≥–µ –æ–∫–∞–∑–∞–ª–∏—Å—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Ç–æ –ø–æ–±–µ–¥–∞ –≤ —Ä–∞—É–Ω–¥–µ –¥–æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–º—É, '
            '—É –∫–æ–≥–æ –±–æ–ª—å—à–µ —Å—É–º–º–∞ –∫—É–±–∏–∫–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            'ü§µ –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ –§—É–ª-—Ö–∞—É—Å  2‚É£ 2‚É£ 2‚É£ 6‚É£ 6‚É£  (—Å—É–º–º–∞ 18)\n'
            'üë§ –ë–æ—Ç –≤—ã–±—Ä–æ—Å–∏–ª –§—É–ª-—Ö–∞—É—Å  6‚É£ 6‚É£ 6‚É£ 3‚É£ 3‚É£ (—Å—É–º–º–∞ 24)\n'
            '–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥–∞ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ë–æ—Ç—É\n\n'
            '‚Ä¢ –ï—Å–ª–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ —Å—É–º–º—ã –∫—É–±–∏–∫–æ–≤ —Å–æ–≤–ø–∞–ª–∏, –≤ —Ä–∞—É–Ω–¥–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–∏—á—å—è.'
            )
    await message.answer(text, parse_mode='html')


async def print_gallows_rules(message: Message) -> None:
    text = ('<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ "–í–∏—Å–µ–ª–∏—Ü—É":</b>\n\n'
            '–í—Å—ë –ø—Ä–æ—Å—Ç–æ: —è –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ, –∞ —Ç—ã –µ–≥–æ –æ—Ç–≥–∞–¥—ã–≤–∞–µ—à—å –ø–æ –±—É–∫–≤–µ.\n\n'
            '–ï—Å—Ç—å –æ–¥–Ω–æ "–Ω–æ": –∏–≥—Ä–∞–µ–º –Ω–∞ —Ç–≤–æ—é... üò± –∂–∏–∑–Ω—å.\n\n'
            '–°–∏–ª—å–Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π: —Ç—ã –º–æ–∂–µ—à—å –æ—à–∏–±–∏—Ç—å—Å—è –∞–∂ 7 —Ä–∞–∑. –ù–æ 8-–∞—è –æ—à–∏–±–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–ª—è —Ç–µ–±—è —Ñ–∞—Ç–∞–ª—å–Ω–æ–π üíÄ.\n\n'
            '–ò –µ—â—ë: –∑–¥–µ—Å—å —É –Ω–∞—Å –Ω–µ "–ü–æ–ª–µ —á—É–¥–µ—Å". –ë—É–∫–≤—ã "–∏" –∏ "–π" - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –±—É–∫–≤—ã, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ "–µ" –∏ "—ë" üòàüòàüòà.')
    await message.answer(text, parse_mode='html')


async def print_gallows_letter(message: Message, state: FSMContext) -> None:
    states = await state.get_data()
    good_letters = states.get('good_letters')
    word = states.get('word')
    text = [f' {letter} ' if letter in good_letters else ' * ' for letter in word]
    await message.answer(''.join(text))


async def print_gallows(message: Message, errors: int) -> None:
    await message.answer(f'<code>{GALLOWS[errors]}</code>', parse_mode='html')


async def print_correct_word(message: Message, state: FSMContext) -> None:
    states = await state.get_data()
    word = ''.join(states.get('word'))
    await message.answer(f'–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ <b>"{word}"</b>', parse_mode='html')
